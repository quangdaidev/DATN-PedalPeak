import React, { useContext, useEffect, useState } from 'react';
import Rating from '@mui/material/Rating';
import { Button } from '@mui/material';
import TextField from '@mui/material/TextField';
import { MyContext } from '../../App';
import { fetchDataFromApi, postData } from '../../utils/api';
import moment from 'moment';

export const Reviews = (props) => {

    const [reviews, setReviews] = useState({
        image:'',
        userName:'',
        review:'',
        rating:'',
        userId:'',
        productId:''
    });

    const [reviewsData, setReviewsData] = useState([]);

    const getReviews = () => {
        fetchDataFromApi(`/api/user/getReviews?productId=${props?.productId}`).then((res) => {
            if (res?.error === false){
                // console.log("getReviews::",res.data)
                setReviewsData(res?.data);
                props.setReviewsCount(res?.data.length)
            }
        })
    }

    const context = useContext(MyContext);

    useEffect(()=>{
        setReviews(()=>({
            ...reviews,
            image:context?.userData?.avatar,
            userName:context?.userData?.name,
            userId:context?.userData?._id,
            productId:props?.productId
        }))

        getReviews();
    },[context?.userData, props]);

    const onChangeInput=(e)=>{
        setReviews(()=>({
            ...reviews,
           review:e.target.value
        }))
    }

    const toxicWords = [
        // Th√¥ t·ª•c, x√∫c ph·∫°m ph·ªï bi·∫øn
        "ƒë·ªì ngu", "v√¥ h·ªçc", "ƒë·∫ßn", "ch√≥", "c√∫t", "ngu", "ƒë·ªì ch√≥", "b·ªë l√°o", "m·∫•t d·∫°y", "kh·ªën n·∫°n",
        "ƒëm", "dmm", "cc", "cl", "vcl", "vl", "fuck", "f*ck", "shit", "sh*t", "bitch", "wtf", "dcm",
      
        // L·ª´a ƒë·∫£o, d·ªãch v·ª• k√©m
        "l·ª´a ƒë·∫£o", "treo ƒë·∫ßu d√™ b√°n th·ªãt ch√≥", "l√†m ƒÉn nh∆∞ ***", "b√°n ƒë·ªì d·ªüm", "ƒë·ªì r√°c", "ƒë·ªì ƒë·ªÉu", 
        "ƒë·ªì t√†o lao", "ƒë·ªì d·ªèm", "treo h√†ng", "giao h√†ng nh∆∞ cc", "d·ªãch v·ª• t·ªá", "d·ªãch v·ª• nh∆∞ c", "giao h√†ng l·ª´a",
      
        // ƒêe d·ªça, qu√° kh√≠ch
        "tao ki·ªán", "tao ƒë·∫≠p", "v·∫£ v√†o m·∫∑t", "s√∫t v√†o m·∫∑t", "phang v·ª° m·∫∑t", "ƒë·∫•m v·ª° m·ªìm", "cho m√†y bay m√†u",
      
        // Ph√¢n bi·ªát, x√∫c ph·∫°m c√° nh√¢n
        "th·∫±ng n√†y", "con kia", "ƒë·ªì nh√† qu√™", "ƒë·ªì m·ªçi", "m·∫∑t ngu", "√≥c ch√≥", "√≥c l·ª£n", "ƒë·∫ßu b√≤",
      
        // Spam/qu·∫£ng c√°o r√°c
        "ki·∫øm ti·ªÅn online", "nh·∫•p v√†o link", "click nh·∫≠n qu√†", "truy c·∫≠p trang n√†y", "hack gi√°", "hack gi·∫£m gi√°",
      
        // Vi·∫øt t·∫Øt l√°ch lu·∫≠t
        "n*g", "fck", "sh1t", "ƒë*o", "clm", "vlcc"
    ];

    const isToxicComment = (text) => {
        const lowerText = text.toLowerCase();
        return toxicWords.some((word) => lowerText.includes(word));
    };

    const isToxicWithPerspective = async (text) => {
        const apiKey = "AIzaSyByUDLeZU32h6zbD1AW0240JolGpuireEQ"; // üî¥ Thay b·∫±ng kh√≥a th·ª±c t·∫ø c·ªßa b·∫°n
        const url = `https://commentanalyzer.googleapis.com/v1alpha1/comments:analyze?key=${apiKey}`;
    
        const body = {
            comment: { text },
            languages: ["vi", "en"], // C√≥ th·ªÉ ch·ªâ c·∫ßn ["vi"] n·∫øu ch·ªâ d√πng ti·∫øng Vi·ªát
            requestedAttributes: { TOXICITY: {} }
        };
    
        try {
            const response = await fetch(url, {
                method: "POST",
                body: JSON.stringify(body),
                headers: {
                    "Content-Type": "application/json"
                }
            });
    
            const result = await response.json();
            const score = result.attributeScores.TOXICITY.summaryScore.value;
            console.log("Toxicity score:", score);
    
            return score > 0.7; // üî¥ Ng∆∞·ª°ng (threshold): > 0.7 l√† toxic
        } catch (error) {
            console.error("Perspective API error:", error);
            return false; // N·∫øu c√≥ l·ªói, v·∫´n cho ph√©p g·ª≠i
        }
    };

    const addReview= async (e)=>{
        e.preventDefault();
        // console.log("review::",reviews)

        if(reviews?.review!==""){

            if (isToxicComment(reviews.review)) {
                context.openAlertBox("error", "B√¨nh lu·∫≠n ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p!");
                return;
            }

            const isToxic = await isToxicWithPerspective(reviews.review);

            if (isToxic) {
                context.openAlertBox("error", "B√¨nh lu·∫≠n c·ªßa b·∫°n c√≥ th·ªÉ mang n·ªôi dung kh√¥ng ph√π h·ª£p. Vui l√≤ng ch·ªânh s·ª≠a.");
                return;
            }
    
            postData(`/api/user/addReview?token=${localStorage.getItem("accessToken")}`, reviews).then((res)=>{
                if(res?.error === false){
                    context.openAlertBox("success", res?.message);
                    setReviews(()=>({
                        ...reviews,
                       review:'',
                       rating:''
                    }))
    
                    getReviews();
                }else{
                    context.openAlertBox("error", "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p");
                }
            })
        } else {
            context.openAlertBox("error", "B·∫°n ch∆∞a nh·∫≠p b√¨nh lu·∫≠n");
        }     
    }

 

    return (
        <div className="w-full productReviewsContainer">
            <h2 className="text-[18px] mb-4">B√¨nh lu·∫≠n kh√°ch h√†ng</h2>

            {
                reviewsData?.length!==0 && 
                <div className="reviewScroll w-full max-h-[300px] overflow-y-scroll overflow-x-hidden pr-5">
                    {
                        reviewsData?.map((review,index)=>{
                            return(
                                <div className="review pt-5 pb-5 border-b border-[rgba(0,0,0,0.1)] w-full flex items-center justify-between"> 
                                    <div className="info w-[60%] flex items-center gap-3">
                                        <div className="img w-[80px] h-[80px] overflow-hidden rounded-full"> 
                                        
                                        {
                                            review?.image!=='' ?
                                            <img
                                                alt=""
                                                src={review?.image} 
                                                className="w-full h-full"
                                            />
                                            :
                                            <img
                                                alt=""
                                                src="https://img.tripi.vn/cdn-cgi/image/width=700,height=700/https://gcs.tripi.vn/public-tripi/tripi-feed/img/477713Dpz/anh-mo-ta.png"
                                                className="w-full h-full"
                                            />
                                        }

                                        
                                        </div>

                                        <div className="w-[80%]">
                                            <h4 className="text-[16px]">{review?.userName}</h4>
                                            <h5 className="text-[13px] mb-0">{moment(review?.createdAt).format('DD/MM/YYYY')}</h5>
                                            <p className="mt-0 mb-0">{review?.review}</p>
                                        </div>                                  
                                    </div>
                                    {
                                        review?.rating !== "" ?
                                        <Rating name="size-small" value={review?.rating} s readOnly/>
                                        :
                                        ""
                                    }
                                </div>
                            )
                        })
                    }
                </div>
            }

            <br/>

            <div className="reviewForm bg-[#fafafa] p-4 rounded-md">
                <h2 className="text-[18px]">Th√™m b√¨nh lu·∫≠n</h2>
                <form className="w-full mt-5" onSubmit={addReview}>
                    <TextField
                        id="outlined-multiline-flexible" label="Vi·∫øt b√¨nh lu·∫≠n..."
                        className="w-full"
                        onChange={onChangeInput}
                        name="review"
                        multiline
                        rows={5}
                        value={reviews.review}
                    />
                    <br/><br/>
                    <Rating 
                        name="size-small" 
                        value={reviews.rating} 
                        onChange={(event, newValue)=>{
                            setReviews(()=>({
                                ...reviews,
                            rating:newValue
                            }))
                        }}
                    />

                    <div className="flex items-center mt-5">
                        <Button type="submit" className="btn-org">G·ª≠i b√¨nh lu·∫≠n</Button>
                    </div>
                </form>
            </div>
        </div>
    )
}